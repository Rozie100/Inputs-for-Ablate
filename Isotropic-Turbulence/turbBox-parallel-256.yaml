# single example of a periodic domain with an inviscid vortex.
---
# metadata for the simulation
environment:
  title: _parallel-256
  tagDirectory: false
arguments: { }
# set up the time stepper responsible for marching in time
timestepper:
  name: theMainTimeStepper
  # io controls how often the results are saved to a file for visualization and restart
  io: # by default the ablate::io::Hdf5Serializer serializer is used
    interval: 15000
  # time stepper specific input arguments.  By default, the time stepper will use TSADAPTBASIC
  arguments:
    ts_type: rk
    ts_adapt_type: none
    ts_max_steps: 1295002
  # sets a single box domain with periodic boundary conditions
  domain: !ablate::domain::BoxMesh
    name: simpleBoxField
    faces: [128, 128, 128 ]
    lower: [ 0, 0, 0 ]
    upper: [ 0.565, 0.565 , 0.565]
    boundary: [ "PERIODIC", "PERIODIC" , "PERIODIC", "PERIODIC" ]
    simplex: false
    # pass in these options to petsc when setting up the domain.  Using an option list here prevents command line arguments from being seen.
    options:
      dm_refine: 1
    modifiers:
      # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::DistributeWithGhostCells
      # if using a FVM ghost boundary cells must be added
      - !ablate::domain::modifiers::GhostBoundaryCells
    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::PerfectGas &eos
          parameters:
            gamma: 1.4
            Rgas: 287.0

        extraVariables: ["ev1"]
  initialization:
    # the ablate::finiteVolume::fieldFunctions::Euler helper can define the "euler" field (rho, rhoE, rhoU, rhoV) from more common inputs
    - !ablate::finiteVolume::fieldFunctions::Euler
      &eulerFlowFieldState
      state: &flowFieldState
        eos: *eos
        temperature: "332"
        pressure: "95325.0"
        velocity: !ablate::mathFunctions::ParsedSeries
          upperBound: 5000
          lowerBound: 1
          formula: 2 * sqrt(1.453 * exp(-2 * (((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((100/9)+ (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((100/9) + (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) * (2/(2*3.14*9/100/256))*sin(.5* ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000)* (2*3.14*9/100/256)*sin( acos(rand(-1,1))) * cos(rand(0,2*3.14)) )* x + (rand(-3.14/2,3.14/2))),  2 * sqrt(1.453 * exp(-2 * (((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((100/9)+ (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((100/9) + (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) * (2/(2*3.14*9/100/256))*sin(.5* ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000)* (2*3.14*9/100/256)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* y + (rand(-3.14/2,3.14/2))), 2 * sqrt(1.453 * exp(-2 * (((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((100/9)+ (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((100/9) + (3.14/(2*3.14*9/100/256)- (100/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000) * (2/(2*3.14*9/100/256))*sin(.5* ((100/9) + (3.14/(2*3.14*9/100/256) - (100/9)) * (i - 1)  / 5000)* (2*3.14*9/100/256)*cos( acos(rand(-1,1))) )* z + (rand(-3.14/2,3.14/2)))
          constants:
            n: 5000
            alpha: 1.453
            c: 256
            l: 2*pi*9/100
            delta: (l/c)
            kappa_eta: 0.8573*5624
            uPrime: 0.25
            kappa_e: 25.82
            kappa_o: 100/9
            kappa_max: pi/delta
            HI: 1
            LO: -1
            HI1: 2*pi
            LO1: 0
            HI2: pi/2
            LO2: -pi/2        

    # the density*ev field must be specified. The DensityExtraVariables class helps by computing density and each ev value using the specified list functions
    - !ablate::finiteVolume::fieldFunctions::DensityExtraVariables
      &densityEVFlowFieldState
      state: *flowFieldState
      # a list of functions used to describe the extra variable initialization
      functions:
        - .093 # ev1 is set to a constant value of 0.25


# this problem uses a single solver (!ablate::finiteVolume::LesCompressibleFlowSolver)
solver: !ablate::finiteVolume::CompressibleFlowSolver
  id: evExample

  parameters:
    cfl: .25
  # a flux calculator must be specified to so solver for advection
  fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
    mInf: .5
  computePhysicsTimeStep: true

  # the default transport object assumes constant values for k, mu, diff
  transport:
    diff: 1E-5
    k: 0.025
    mu: 1E-5

  # share the existing eos with the compressible flow solver
  eos: *eos

  additionalProcesses:
    # the ArbitrarySource process was added to define a region of additional ev source
    - !ablate::finiteVolume::processes::LES
      tke: ev1

  monitors:
    # output the time and dt at each time step
    - !ablate::monitors::TimeStepMonitor



