# This problem statement tests pipe flow results suing both a lodi isothermal wall and sublimation boundary condition.  The sublimation uses a very high latentHeatOfFusion resulting is no blowing and therefore should behave like a wall.
#
---
# metadata for the simulation
environment:
  title: _channelFlow
  tagDirectory: false
arguments: { }
# set up the time stepper responsible for marching in time
timestepper:
  name: theMainTimeStepper
  arguments:
    ts_type: rk
    ts_max_steps: 500000
    ts_dt: 1.0E-10
    ts_adapt_safety: 0.9
  # io controls how often the results are saved to a file for visualization and restart
  io:
    interval: 50000 # results are saved at every 5 steps.  In real simulations this should be much larger.

  # the BoxMeshBoundaryCells domain adds an extra layer of boundary cells to the outside of the domain and
  # tags these cells with special labels
  domain: !<!ablate::domain::BoxMeshBoundaryCells>
    name: simpleBoxField
    faces: [ 40, 100,40]
    lower: [ 0.0, -0.0125,0.01]
    upper: [ 0.05, 0.0125,0.01]
    simplex: false
    preModifiers:
      - !<!ablate::domain::modifiers::DistributeWithGhostCells>
        ghostCellDepth: 3
    postModifiers:


      - !ablate::domain::modifiers::GhostBoundaryCells

    options:
      dm_refine: 0
    fields:
      - !<!ablate::finiteVolume::CompressibleFlowFields>
        eos: !ablate::eos::PerfectGas  &1
          parameters:
            gamma: 1.4
            Rgas: 287.0
          species: [ N2, H2O, O2 ]

        extraVariables: [ev1]
        region:
          name: domain
      # by adding a pressure field the code will compute and output pressure
      - name: pressure
        location: AUX
        type: FVM
        region:
          name: domain
  initialization:
    - !<!ablate::finiteVolume::fieldFunctions::Euler>

      state: &2
        eos: *1
        pressure: 101325.0
        temperature: 300
        velocity: 0
        massFractions: !<!ablate::finiteVolume::fieldFunctions::MassFractions>
          &massFractions
          eos: *1
          values:
            - fieldName: N2
              field: "x > .1 ? .2 : 1.0"
            - fieldName: H2O
              field: " x> .1 ? .3 :0"
            - fieldName: O2
              field: " x > .1 ? .5 : 0"
    - !<!ablate::finiteVolume::fieldFunctions::DensityMassFractions>
      state: *2
    - !<!ablate::finiteVolume::fieldFunctions::DensityExtraVariables>
      state: *2
      functions:
        - 20

    - !<!ablate::finiteVolume::fieldFunctions::Euler>
      region:
        name: boundaryCellsLeft
      state: &3
        eos: *1
        pressure: 101325.0
        temperature: 300
        velocity: !ablate::mathFunctions::ParsedSeries
          upperBound: 5000
          lowerBound: 1
          formula: (28*(0.0125-abs(y))^1/7)/5000 +(2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/5000))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/5000) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * cos(rand(0,2*3.14)) )* x + (rand(-3.14/2,3.14/2)))),  2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.01^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/500))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* y + (rand(-3.14/2,3.14/2))),  2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.01^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/500))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* z + (rand(-3.14/2,3.14/2)))

          constants:
            n: 5000
            alpha: 1.453
            delta: (2*3.14*9/100/8)
            kappa_eta: 0.8573*5624
            uPrime: 0.25
            kappa_e: 25.82
            kappa_o: (100/9)
            kappa_max: 3.14/delta
            HI: 1
            LO: -1
            HI1: 2*pi
            LO1: 0
            HI2: pi/2
            LO2: -pi/2

        massFractions: !<!ablate::finiteVolume::fieldFunctions::MassFractions>
          eos: *1
          values:
            - fieldName: N2
              field: "x > .1 ? .2 : 1.0"
            - fieldName: H2O
              field: " x> .1 ? .3 :0"
            - fieldName: O2
              field: " x > .1 ? .5 : 0"
    - !<!ablate::finiteVolume::fieldFunctions::DensityMassFractions>
      region:
        name: boundaryCellsLeft
      state: *3
    - !<!ablate::finiteVolume::fieldFunctions::DensityExtraVariables>
      region:
        name: boundaryCellsLeft
      state: *3
      functions:
        - 20
solvers:
  # The compressible flow solver will solve the compressible flow equations over the interiorCells
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: vortexFlowField
    # only apply this solver to the flowRegion, area without faces
    region:
      name: interiorCells
    additionalProcesses:
      - !ablate::finiteVolume::processes::PressureGradientScaling
        &pgs
        eos: *1
        alphaInit: 100.0
        maxAlphaAllowed: 100.0
        domainLength: 0.165354
        log: !ablate::monitors::logs::CsvLog
          name: pgsLog

    # a flux calculator must be specified to so solver for advection
    fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
      pgs: *pgs

    # cfl is used to compute the physics time step
    parameters:
      cfl: 0.5

    # the default transport object assumes constant values for k, mu, diff
    transport:
      &transportModel
      k: .2
      mu: .1
      diff: 1E-4

    # share the existing eos with the compressible flow solver
    eos: *1

    monitors:
      # output the timestep and dt at each time step
      - !ablate::monitors::TimeStepMonitor

      # use a boundary solver to update the cells in the boundaryCellsLeft region to represent an inlet
  - !ablate::boundarySolver::BoundarySolver
    id: inlet
    region:
      name: boundaryCellsLeft
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: false
    processes:
      - !<!ablate::boundarySolver::lodi::Inlet>
        eos: *1
        pgs: *pgs
        velocity: !ablate::mathFunctions::ParsedSeries
          upperBound: 5000
          lowerBound: 1
          formula: (28*(0.0125-abs(y))^1/7)/5000 +(2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/5000))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/5000) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * cos(rand(0,2*3.14)) )* x + (rand(-3.14/2,3.14/2)))),  2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.01^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/500))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* y + (rand(-3.14/2,3.14/2))),  2 * sqrt(1.453 * exp(-2 * (((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.01^2 / 25.82) * (((2*3.14*1000/9)+ (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((2*3.14*1000/9) + (3.14/(.1/500)- (2*3.14*1000/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000) * (2/(.1/500))*sin(.5* ((2*3.14*1000/9) + (3.14/(.1/500) - (2*3.14*1000/9)) * (i - 1)  / 5000)* (.1/500)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* z + (rand(-3.14/2,3.14/2)))

          constants:
            n: 5000
            alpha: 1.453
            delta: (2*3.14*9/100/8)
            kappa_eta: 0.8573*5624
            uPrime: 0.25
            kappa_e: 25.82
            kappa_o: (100/9)
            kappa_max: 3.14/delta
            HI: 1
            LO: -1
            HI1: 2*pi
            LO1: 0
            HI2: pi/2
            LO2: -pi/2


  # use a boundary solver to update the cells in the boundaryCellsRight region to represent an open pipe
  - !ablate::boundarySolver::BoundarySolver
    id: openBoundary
    region:
      name: boundaryCellsRight
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        eos: *1
        reflectFactor: 0.0
        referencePressure: 101325.0
        maxAcousticsLength: 1
        pgs: *pgs

  # use a boundary solver to update the cells in the boundaryCellsTop region to represent standard wall
  - !ablate::boundarySolver::BoundarySolver
    id: topBoundary
    region:
      name: boundaryCellsTop
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *1
        pgs: *pgs

  # use a boundary solver to update the cells in the boundaryCellsTop region to represent standard wall
  - !ablate::boundarySolver::BoundarySolver
    id: topBoundary
    region:
      name: boundaryCellsBottom
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *1
        pgs: *pgs


